<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section xml:id="bhax-textbook-feladatok-mandelbrot.Mandelbrot">
        <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            A Mandelbrot halmaz számításához egy kis matekra lesz szükség. Nagyon vizualizációba most nem fogunk kód oldalról belemenni, mert egy másik alfejezet pont erről fog szólni...
        </para>
<literallayout>
z[0] = 0
z[1] = z[0]^2+c
z[2] = z[1]^2+c
...
z[n] = z[n-1]^2+c 
</literallayout>
        <para>
          Azaz mindig 0, 0 pontból indulunk, majd négyzetét vesszük és egy konstans számot hozzáadunk. Nézzünk pár esetet! Az ábrákon valós tengely vízszintes, míg képzetes függőleges. Az ábrán piros X-el jelöltem a konstanst és az step-eket fekete pontokkal (össze is kötöttem őket).
        </para>
        <figure>
            <title>c = {0,0}</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelstep00.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>c = {0,0}</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <figure>
            <title>c = {0.3 ,0}</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelstep01.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>c = {0.3 ,0}</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <figure>
            <title>c = {0.3 ,0.1}</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelstep02.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>c = {0.3 ,0.1}</phrase>
                </textobject>
            </mediaobject>
        </figure>
         <figure>
            <title>c = {0.3 ,0.2}</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelstep03.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>c = {0.3 ,0.2}</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
         Ha a konstant például 0.3, 0.7 akkor nagyon gyorsan "elszáll" az érték.
        </para>
        <figure>
            <title>c = {0.3 ,0.7}</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelstep08.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>c = {0.3 ,0.7}</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
          Mit is csináltunk tulajdonképpen? Nos, rögzítettük 0,3 re értéket, és elkezdtük "pásztázni" im értékeket 0,1-es lépés közzel.
          A kódban is ezt fogjuk csinálni, csak minden pásztázott ponthoz (re im pár) rögzíteni fogjuk mennyi iteráció után kerültek ki az origó 2 sugarú köréből. 
          Azért hogy ne fusson a végetelenségig, ezért az iterációknak lesz egy teteje.
          Azaz ha a max iter számot elérjük akkor meg fogunk állni.
        </para>
        <para>
          A user megad egy re alsó és felső határt (mettől meddig pásztázunk Re tengelyen), illetve ugyanezt Im tengelyen.
          A lépésszám állítható is lenne, de mivel a legvégén terminálra akarunk írni, ezért ettől most eltekintünk.
        </para>
        <para>
          Tanár Úrtól eltérően én feldaraboltam a kódot, de csak azért hogy egyszerűbb legyen bemutatni.
        </para>
        <para>
          Az első kód részlet egy olyan funkció, aminek adunk egy komplex konstanst és egy max iter számot, és ez a fent bemutatott algoritmust végigcsinálja.
          A visszaadott érték az iter szám. Ha ez alacsony akkor nagyon gyorsan elszállt a számítás, ha magas akkor sokáig stabil volt.
        </para>
<literallayout>
int mandel(
    float c_re, 
    float c_im, 
    int max_iter)
{
  int i = 0;
  float temp=0.0, z_re=0.0, z_im=0.0;
  while ( ( ((z_re*z_re)+(z_im*z_im)) &lt; 4.0 ) &amp;&amp; ( i &lt; max_iter ) )
  {
    temp =(z_re*z_re)-(z_im*z_im)+c_re;
    z_im = 2.0*(z_re*z_im)+c_im;
    z_re=temp;
    i++;
  }
  return i;
}
</literallayout>
        <para>
          A második kód részlet már csak boilerplate kód.
          Erősen átírtam Tanár Úréhoz képest, direkt hogy int**-t használjunk.
          A másik dolog, hogy Tanár Úré valami miatt a második for bodyban számolja c reál és imaginárius részét is érthetőség miatt, én ezt egy picit optimáltam.(elég a külsőben számolni az egyiket)
          Annyi történik, hogy végig járjuk a kapott rácsot és kitöltögetjük, hogy melyik komplex konstans-hoz mennyi iter tartozik.
        </para>
<literallayout>
void apply_mandel(
    int** quad_mx, 
    int re_size, 
    int im_size,
    float re_lo, 
    float re_hi, 
    float im_lo, 
    float im_hi, 
    int max_iter)
{
  
  int re_step,im_step,itercount;
  float d_re,d_im,c_re,c_im;
  if(quad_mx == NULL || re_size &lt; 1 || im_size &lt; 1) return;
  d_re = (re_hi-re_lo)/re_size;
  d_im = (im_hi-im_lo)/im_size;
  for(re_step = 0; re_step &lt; re_size;++re_step){
    c_re = re_lo + d_re * re_step;
    for(im_step = 0; im_step &lt; im_size;++im_step){
      c_im = im_hi - d_im * im_step;
      itercount = mandel( c_re,c_im,max_iter);
      quad_mx[re_step][im_step]=mandel( c_re,c_im,max_iter);
    }
  }
}
</literallayout>
        <para>
          A harmadik rész maga a main. Csak beolvassuk a usertől mely határok között számoljunk, illetve deklaráljuk initeljük az int ptr ptr-t, plusz a végén feltakarítunk.
        </para>
    <programlisting language="c" linenumbering="numbered">
    <textobject><textdata fileref="Mandel/mandel.c"/></textobject>
  </programlisting>
        <figure>
            <title>A Mandelbrot halmaz win, csak iter számok</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelnums.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A Mandelbrot halmaz win, csak iter számok</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <figure>
            <title>A Mandelbrot halmaz win, színes</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandel0.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A Mandelbrot halmaz win, színes</phrase>
                </textobject>
            </mediaobject>
        </figure>
         <figure>
            <title>A Mandelbrot halmaz win, színes, határ állítás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandel1.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A Mandelbrot halmaz win, színes, határ állítás</phrase>
                </textobject>
            </mediaobject>
        </figure>
        

    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
          Png++ helyett SDL2-t fogunk használni, és egyenesen a képernyőre renderelünk.
          A feladat szempontjábó érdekes részek a MandelDraw class-ba kerültek.
        </para>
        <para>
          Az osztály az alábbi állapotváltozókkal rendelkezik. Egyedül a b c és d szorulnak külön magyarázatra.
          Ugye egy valós és képzetes tengelyünk van.
          a és b azt mutatja meg hogy a valós tengelyen mettől meddig száímtunk.
          c és d azt mutatja meg hogy a képzetes tengelyen mettől meddig száímtunk.
        </para>
<literallayout>
int w; // scrren width
int h; // screen height
int iter_lim; // iteration limit for mandel
double a; // 
double b;
double c;
double d;
</literallayout>
      <para>Az egyetlen funkció a render. Ez egy SDL renderer ptr-t kap és elvégzi az értékek számítását és a rendernek megmondja mey pixel milyen rgba számokat kapjon.</para>
      <para>Maga a számítás ugyanaz mint az előbbiekben. j a képzetes része a koordinátáknak, k a valós része.
      j és k-t úgy mappeljük fel a képernyőre, hogy j jelentse a képernyő esetén az y-t (magasság), k pedig x-et azaz hosszat.</para>
<literallayout>
void render(SDL_Renderer *renderer)
{
  int szazalek = 0; // unused
  double dx = ( b - a ) / w;
  double dy = ( d - c ) / h;
  double reC, imC, reZ, imZ;
  int iteracio = 0;
  for ( int j = 0; j &lt; h; ++j ){
    imC = d - j * dy;
    for ( int k = 0; k &lt; w; ++k ){
      reC = a + k * dx;
      std::complex&lt;double&gt; c ( reC, imC );
      std::complex&lt;double&gt; z_n ( 0, 0 );
      iteracio = 0;
      while ( std::abs ( z_n ) &lt; 4 &amp;&amp; iteracio &lt; iter_lim ){
        z_n = z_n * z_n + c;
        ++iteracio;
      }
      SDL_SetRenderDrawColor(renderer, iteracio%255, (iteracio*iteracio)%255,0, 0xff);
      SDL_RenderDrawPoint(renderer, k, j);
    }
    szazalek = ( double ) j / ( double ) h * 100.0;
  }
}
</literallayout>
      <para>
        Ahhoz hogy forduljon például a következő flageket kell használni <literal>g++ mandelcx.cpp -Wl,-subsystem,windows -lmingw32 -lSDL2main -lSDL2</literal>
      </para>
      <figure>
        <title>mandelcx comp</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/mandelcx_comp.png" scale="100" />
            </imageobject>
            <textobject>
                <phrase>mandelcx comp</phrase>
            </textobject>
        </mediaobject>
    </figure>
    <para>arg-ok nélkül futtatva default értékekkel a következő renderelődik. A programból úgy lehet kilépni, hogy a megnyílt ablakot default bezáró gombot nyomjuk például.</para>
    <figure>
        <title>mandelcx</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/mandelcx.png" scale="100" />
            </imageobject>
            <textobject>
                <phrase>mandelcx</phrase>
            </textobject>
        </mediaobject>
    </figure>
    <para>A fájl többi része SDL specifikus. Az egyetlen érdekes dolog, hogy a program egy while-ban fut és egy bool változóval kontrolláljuk a kilépést ezen ciklusból.
    A változó alapvetően true értékű, azonban, ha ablakbezárást érzékelünk, akkor ezt átállítjuk.</para>
    <para>Event handling-gel nem játszottunk. A lehető legegyszerűbben valósítottuk meg, ugyanis csak a kilépésre kell figyelni. Az utazóban persze ezt majd kicsit át fogjuk alakítani.</para>
      <programlisting language="c++" linenumbering="numbered">
        <textobject><textdata fileref="Mandel/mandelcx.cpp"/></textobject>
      </programlisting>        
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
          Az előző mandelbrot feladat mintájára, csak a számítási algoritmust illetve a formális paramétereket, és azok technikai kezelését kell módosítani.
        </para>
        <para>De mi is az a biomorph? Nos, emlékezzünk, hogy mandelbrot esetben kézzel 0,0-ból lépegettünk egy az alábbi diagramon meghatározott piros pont (re és im koordináták miatt ugye ez egy komplex szám)-tot adogattunk hozzá miután négyzetre emeltük.</para>
        <para>Azaz piros ponttal körbejárattuk a képernyő által jelentett komplex számsíkot, és minden pontba beírtuk mennyi lépés után szállt el a számítás (vagy kerültünk egy adott origó köéppontú adott R sugarú körön kívülre.)</para>
        <figure>
            <title>mandel step</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelstep01.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>mandel step</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>Biomoprh-nál egyetlen dolog történik: nem 0,0-ból indulunk hanem egy magadott pontból. Alábbi diagramon kékkel jelöltem egy példát.</para>
        <figure>
            <title>biomorph iter</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/biomorphods.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>biomorph iter</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>Emiatt ugye szükség lesz két új paraméterre: a kezdő pont valós és képzetes koordináta párosára.</para>
        <para>A másik paraméter egy R szám. Ez azért kell, mert az iterációs terminálásának kondícióját megváltoztattuk: Akkor lépünk ki az iterációból, ha vagy valós, vagy képzetes tengelyen R-nél távolabb kerülünk az origótól.</para>
        <para>Az eredeti kódot kicsit tehát módosítani kell!</para>
        <para>std::pow az erdetiben köbös, viszont mi nyuszit akarunk rajzolni, ezért négyzetes kell.</para>
        <para>A másik változtatás, hogy akkor lépünk ki a ciklusból, ha vagy elértük iter_limitet vagy a számított komplex szám távolabb van origótól, mint R, azaz abszolút értékét vesszük. Ez gyakorlatilag a vektor hossza lenne, ha pl. valami 2d-s grafikával dolgoznánk.</para>
<literallayout>
std::complex&lt;double&gt; cc ( reC, imC );
double dx = ( xmax - xmin ) / w;
double dy = ( ymax - ymin ) / h;
for ( int y = 0; y &lt; h; ++y ){
    for ( int x = 0; x &lt; w; ++x ){
        double reZ = xmin + x * dx;
        double imZ = ymax - y * dy;
        std::complex&lt;double&gt; z_n ( reZ, imZ );
        int iteracio = 0;
        for (int i=0; i &lt; iter_lim; ++i){
            z_n = std::pow(z_n, 2) + cc;
            if( std::abs(z_n) &gt; R){
                iteracio = i;
                break;
            }
        }
        SDL_SetRenderDrawColor(renderer, (iteracio * 20)%255, (iteracio* 40)%255, (iteracio* 60)%255 , 0xff);
        SDL_RenderDrawPoint(renderer, x,y);
    }
}
</literallayout>
    <para>Compile esetén g++-nak a szokásos sdl által megkövetelt flag-eket küldjük, azaz <literal>g++ biomorph.cpp -Wl,-subsystem,windows -lmingw32 -lSDL2main -lSDL2</literal></para>
        <figure>
            <title>biomorph comp</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/biomorphcomp.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>biomorph comp</phrase>
                </textobject>
            </mediaobject>
        </figure>
    <para>Ha mindent jól csináltunk akkor, egy biomorph <link xlink:href="https://mathworld.wolfram.com/DouadysRabbitFractal.html">nyuszival</link> kell találkoznunk.</para>
        <figure>
            <title>biomorphnyuszi</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/biomorphnyuszi.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>biomorphnyuszi</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <figure>
            <title>biomorph</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/biomorph.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>biomorph</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <programlisting language="c++" linenumbering="numbered">
          <textobject><textdata fileref="Mandel/biomorph.cpp"/></textobject>
        </programlisting>   
        <para>
            A biomorfos algoritmus pontos megismeréséhez ezt a cikket javasoljuk: 
            <link xlink:href="https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf">https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf</link>.
            Az is jó gyakorlat, ha magából ebből a cikkből from scratch kódoljuk be a sajátunkat, de mi a királyi úton járva a 
            korábbi <link xlink:href="#bhax-textbook-feladatok-mandelbrot.Mandelbrot">Mandelbrot halmazt</link> kiszámoló 
            forrásunkat módosítjuk. Viszont a program változóinak elnevezését összhangba hozzuk a közlemény jelöléseivel:
        </para>                                                                                
    </section>                                       

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>SDL2. EventBus-t, vagy signal-slot rendszert DIREKT nem írtunk, de valós életben így kéne... helyette simán az állapotváltozókkal jeleztem a történéseket.</para>
        <para>Argumentumok nélkül futtatható. Debug üzenetekért kimenetet irányítsuk log file-ba stb. Debug log-hoz megfelelő preproc #define-t uncommentelni...</para>
        <para>Zoom-olást bal klikkel indítja az ember. Nyomva tartva a bal gombot téglalapot rajzol a program.</para>
        <figure>
            <title>zoom rect</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandeltrav2_zoom.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>zoom rect</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>A téglalap húzgálásra DIREKT TARTJA a képernyő arányt.</para>
        <para>Bal egérgomb felegendéskor a kijelölt téglalap alapján történik a nagyítás.</para>
        <figure>
            <title>zoom</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandeltrav2_zoom2.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>zoom</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>A nagyítás konkrét frame-jében nem a teljes képet számoljuk. Ehelyett dinamikus számú sornyi pixelt számolunk ki mindig. A lényeg hogy 60 FPS a cél, ha túl sok időt vesz igénybe adott frame-en a dolog, akkor abbahagyjuk a zsámítást, és majd következő frame-ben folytatjuk.</para>
        <para>Ha épp számolódik a background, és újra nagyítunk DIREKT nem tisztítjuk a buffert.</para>
        <para>
          User szinten emiatt egy érdekes egymásra lapolódás lesz megfigyelhető. Alábbi ábrán egy futó számítás közben újra nagyítottunk.
          Az előző számítási értékek természetesen egyből eltűnnek, ha a jelenleg futó számítás odaér a buffer írásban.
        </para>
        <figure>
            <title>zoom quick succession overlap</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandeltrav2_zoom_quick_succession.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>zoom quick succession overlap</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>A fentiekből következik, hogy a nagyítás DIREKT "lassul" és "gyorsul" olykor, nem hiba. Ha az épp most számolandó sorok gyorsan elszállnak, akkor gyorsan végez velük azaz szuper gyorsan végezni fog velük.
        Ellenkező esetben ha a neki kiosztott sorok nagyon sokáig benn maradnak az R sugarú Q-beli körben, akkor kevés ilyen sort tud kiszámolni egy frame alatt, ezért úgy fog tűnni. mintha lassulna.</para>
        
        <para>Jobb gombbal kapcsoljuk be a tracert. Ez egy predefined iter számig végig számítja a komplex számokat. Ehhez c komplex számot(amit mindig hozzáadunk) a user egér pozíciója alapján veszi.</para>
        <figure>
            <title>tracer 0</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandeltrav2_tracer0.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>tracer 0</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <figure>
            <title>tracer 1</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandeltrav2_tracer1.png" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>tracer 1</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>Egér középső gombot vagy görgőt megnyomva visszaugrik default zoomba. 
        Összességében fájt event-ek nélkül, de meg lehet csinálni.
        Huzzah...
        </para>
        <programlisting language="c++" linenumbering="numbered">
          <textobject><textdata fileref="Mandel/mandel_utazo2.cpp"/></textobject>
        </programlisting>
    </section
</chapter>                
