<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            A lényeg, hogy adott egy számítási algoritmus melyet meghívva nem csak a következő értéket, hanem a rákövetkezőt is megkapjuk.
            Azaz az 1. hívásnál kell számítani, de a 2. hívásnál nem kell, hiszen az 1. számítás a 2. értékét is kiszámította előre.
            Azért hogy ezt kezeljük egy egyszerű osztályt fogunk írni.
            Ahhoz hogy ezt a "bufferelést" megoldjuk két változót vezetünk be: magát a tárolt értéket, illetve egy boolean-t, hogy jelenleg úgy szólván szabad-e aktívnak tekinteni a tárolt értéket.
        </para>
<literallayout>
boolean store_empty;
double stored;
</literallayout>
        <para>
            Maga az algoritmus csak simán annyiról szól, hogy ha store_empty true, akkor kell számítást végezni.
            A számítás első eredményét visszaadjuk, a másikat betároljuk, és a store_empty-t false-re állítjuk.
            Ha store_empty false, akkor store_empty-t true-ra állítjuk, hisz úgymond ürítjük a buffert, és visszaadjuk a tárolt értéket.
        </para>
        <para>
          A feladat könnyebb megértéséhez egy hackelt verzió az eredeti java class-ból.
        </para>
      <programlisting language="java" linenumbering="numbered">
        <textobject><textdata fileref="Welch/PolarGen2.java"/></textobject>
      </programlisting>
       <para>
           Alább az eredeti feladat:        
       </para>
      <programlisting language="java" linenumbering="numbered">
        <textobject><textdata fileref="Welch/PolarGen.java"/></textobject>
      </programlisting>
       <para>
          C++ esetben három különbség lesz: random, sqrt és log. 
       </para>
       <para>
          [0,1) tartományon random double generálását végezhetjük az alábbi módon. Ehhez szükség lesz stdio-ra rnd() illetve RAND_MAX miatt.
       </para>
<literallayout>
double rnd01(){return rand() / (RAND_MAX + 1.);}
</literallayout>
        <para>
          sqrt és log a már ismert math lib-ben van, azaz ne felejtsük include-olni.
       </para>
       <programlisting language="c++" linenumbering="numbered">
        <textobject><textdata fileref="Welch/PolarGen.cpp"/></textobject>
      </programlisting>
    </section>        

    <section>
        <title>LZW</title>
        <para>
          Mielőtt neki ugrunk egy kis áttekintés a <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat">progpater</link> alapján.
        </para>
        <para>
          A programunk kapni fog egy {0,1} karakterekből (bár lehetnének bitek is) álló mintát. Ez alapján memóriában 
        </para>
<literallayout>
01111001001001000111
</literallayout>
        <para>
          A kapott minta alapján memóriában létre kell hoznunk egy fát.
          A fa csomópontokból áll. Minden csomóponthoz tartozik egy érték illetve lehet két gyermeke, továbbiakban jobb és bal.
          A fa továbbá tartalmaz egy segéd ptr-t arra a csomópontra, ahol éppen állunk.
          A következő szabályok szerint építjük a fát:
        </para>
        <itemizedlist mark='bullet'>
          <listitem>
            <para>Alapból a gyökér létezik értéke /, és ezen gyökér csomóponton állunk(erre mutat a segéd ptr).</para>
          </listitem>
          <listitem>
            <para>Ha 0-t kapunk, és létezik bal gyermek, akkor a segéd ptr-rel innentől erre fogunk mutatni.</para>
          </listitem>
          <listitem>
            <para>Ha 0-t kapunk, és nem létezik bal gyermek, akkor segéd ptr által mutatott node bal gyermekeként létrehozzuk. Segéd ptr-rel pedig gyökérre mutatunk innentől.</para>
          </listitem>
          <listitem>
            <para>Ha 1-t kapunk, akkor teljesen szimmetrikusan a fenti két szabályt jobb gyerekre alkalmazzuk.</para>
          </listitem>
        </itemizedlist>
        <para>Pici példácskán, mondjuk 0110-re, nézzük meg hogy működik! Minden lépésnél ábrázolni fogom a fát is! Csillaggal árbázoljuk hol áll éppen a segéd ptr!</para>
<literallayout>
Feldolgozva=[]
---/*
Feldolgozva=[0]
---/*
------0
Feldolgozva=[01]
------1
---/*
------0
Feldolgozva=[011]
------1*
---/
------0
Feldolgozva=[0110]
------1
---------0
---/*
------0
</literallayout>
        <para>Most nézzük meg mi ez az egész max, átlag, szórás!</para>
        <para>Két fogalmat azonban be kell hozzá vezetni. Az egyik a levél, a másik a mélység.</para>
        <para>Egy csomópontot levélnek nevezünk, ha nincsenek gyermekei.</para>
        <para>Egy csomópont mélységén azt értjük (ezen esetben) hogy a hány csomópont érintésével tudunk eljutni gyökér nodeból az adott node-ba.</para>
        <para>Vegyük propateres példát és írjuk fel rá kézzel az értékeket!</para>
<literallayout>
------------1(3)
---------1(2)
------1(1)
---------0(2)
------------0(3)
---------------0(4)
---/(0)
---------1(2)
------0(1)
---------0(2)
melyseg=4
altag=2.750000
szoras=0.957427
</literallayout>
        <para>Max mélység alatt a legnagyobb mélységet értjük, azaz 4-et.</para>
        <para>Átlagmélység a leaf mélységek összege osztva a leaf számmal, azaz:</para>
<literallayout>
hosszak={3,4,2,2}
leafs=4

atlag=4/3+4/4+2/4+2/4
atlag=0.75+1+0.5+0.5
atlag=2.75

</literallayout>
        <para>A teljes fa szórása alatt a szórásösszeg és a levél szám hányadosának négyzetgyökét értjük. Meg kell jegyezni, hogy valójában leaf számnál eggyel kisebb számot használunk 1-nél nagyobb leaf számú esetekben.</para>
        <para>Szórásösszeg, az összes levél szórásának összege.</para>
        <para>Egy node szórása alatt az adott node mélységének átlagmélységtől vett különbségének négyzetét értjük.</para>
<literallayout>
hosszak={3,4,2,2}
leafs=4
atlag=2.75

szorasosszeg=(3-2.75)^2+(4-2.75)^2+(2-2.75)^2+(2-2.75)^2
szorasosszeg=0.0625+1.5625+0.5625+0.5625
szorasosszeg=2.75
szoras=(2.75/4-1)^0.5
szoras=(0.9166667)^0.5
szoras=0.957427
</literallayout>
    <para>Most hogy kézzel kiszámoltuk, írjuk át C-re.</para>
    <para>A C kódban akét komoly eltérés a Tanár Úr féle kódtól:</para>
    <itemizedlist mark='bullet'>
      <listitem>
        <para>allokáció/felaszabadításnál a ptr-t kiírjuk standard output-ra</para>
      </listitem>
      <listitem>
        <para>Általános traversalokat használunk funtcion ptr-ekkel</para>
      </listitem>
    </itemizedlist>
    <para>A ptr-ek kilogolása csak amiatt fontos hogy grafikus visszajelzést is kapjunk, hiszen most ugye dinamikusan allokált adatokkal dolgozunk, amelyeket kézileg kell életciklus menedzselni.</para>
<literallayout>
void free_node(int depth, Node* node, UserData*ud)
{
  if(node == NULL) return;
  #ifdef CUSTOM_DEBUG_OUT
    printf("Free node %p\n",node);
  #endif
  free(node);
}
</literallayout>
    <para>Az általános traversal amiatt kellett, hogy egy kicsit az stl-es algorithm-re hajazva, legyen lehetősége a user-nek megadnia, hogy mi történjen, a fa pedig csak a helyes traversalért legyen felelős.</para>
    <para>Nézzünk egy példát!</para>
<literallayout>
void foreach_inorder(int depth,Node* root, traversal_fn fptr, UserData* ud )
{
  if(root == NULL) return;
  foreach_inorder(depth+1,root->right, fptr, ud );
  fptr(depth,root,ud);
  foreach_inorder(depth+1,root->left, fptr, ud );
}
</literallayout>
  <para>Láthatóan a fenti funckió simán rekurzívan hívja magát a két child-ra. A fn ptr csak akkor jön be a képbe mikor magát az adott subtree root-ját dolgozzuk fel. UserData csak egy typedef-elt void ptr, hogy a user állapotot is betudjon adni, ne csak viselkedést.
  Egy példa fn amit fn ptr-ként beküldhetünk legyen a print</para>
<literallayout>
void print_node(int depth, Node* node, UserData*ud)
{
  int i;
  if(node == NULL) return;
  for(i=0;i&lt;depth; ++i){printf("---"); }
  printf("%c (%d) %p\n",node-&gt;value, depth,node);
}
</literallayout>
  <para>A számolásokhoz simán végigszaladunk a leafeken és mivel nem tudjuk előre a leaf számot, ezért egy dinamikusan allokált helyre gyűjtjük be a leaf-ek mélységeit. De csinálhattuk volna úgyis hogy többször megyünk végig a leaf-eken és akkor kevesebb memóriát használtun volna, azaz CPU vs. MEM tradeoff.</para>
  <para>Igen... <literal>LeafCountData</literal>-t totál kikerülhettük volna: bedobhattuk volna simán a nyers ptr-t aztán inkrementáltuk volna...</para>
  <para>Alább a progpater-es példa inputként kimeneten.</para>
    <figure>
        <title>Lzw C output</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/btreec.png" scale="100" />
            </imageobject>
            <textobject>
                <phrase>Lzw C output</phrase>
            </textobject>
        </mediaobject>
    </figure>
    <para>Alább a C forrás</para>
    <programlisting language="c" linenumbering="numbered">
      <textobject><textdata fileref="Welch/btreec.c"/></textobject>
    </programlisting>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
          Az előző feladatban még a free-t is a function ptr-es traversallal csináltuk, azaz az előző feladatban ez részletezésre került.
          Alábbi kód részleten látszik, hogy az előző részben bevezetett módon elég egyszerű a dolog.
        </para>
<literallayout>
  printf("\nPREORDER\n");
  foreach_preorder(0,bt->root,print_node,NULL);
  printf("\nPOSTORDER\n");
  foreach_postorder(0,bt->root,print_node,NULL);
</literallayout>
        <para>A hangsúly a fn ptr alkalmazásán van. Ha azt értjük, akkor az alábbi kép nem lesz meglepő.</para>
        <figure>
        <title>Traversals</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/traverslasc.png" scale="100" />
            </imageobject>
            <textobject>
                <phrase>Traversals</phrase>
            </textobject>
        </mediaobject>
    </figure>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
          A Twitch-es nbatfai megoldást fogom átszerkeszteni.
          A builderezést és lambdázást a mozgató szemantika részben fogom csinálni, ahol tényleg nullából újra írom.
        </para>
        <para>
          Mivel az nbatfai root ptr-esre alapszik, és azt a következő fejezetben dolgoztam ki, itt effektíve csak egy diff-et írok doksiba.
        </para>
        <para>
          Mielőtt belemegyünk, annyit érdemes tisztázni, hogy ValueType-tól nem várhatjuk el, hogy lesz default ctor-a, így sajnos a tree ctor-ához hozzá kell nyúlni.
        </para>
        <para>
          Magyarul, ha biztosra tudnánk venni, hogy ValueType halmaznak van egy speciális eleme ami a halmaz alját, vagy null-t vagy stb.-t jelentené, akkor nem kéne mindenképpen értéket kérni a tree ctorban.
          Azonban ez elég erős megkötés lenne.
        </para>
        <para>
          Kilenc helyen értem hozzá a kódhoz, ezek tételes felsorolása és magyarázata alább következik.
        </para>
        <para>
          Az első módosítás a tree ctor. Én úgy gondolom érdemes mindenképpen explicit értéket kérni, mert különben arra kéne hagyatkoznunk, hogy ValueType-nak van default ctor-a.
          Természetesen treep-t root címére kell állítanunk.
        </para> 
<literallayout>
BinTree(ValueType rootval) : root(rootval), treep(&amp;root), depth(0)
</literallayout>
        <para>
          Az második módosítás a dtor-t illeti. Mivel root kompozíciós tag, ezért csak a child node-okra kell hívnunk a rekurzív delete-t.
        </para>
<literallayout>
deltree(root.left_child() );
deltree(root.right_child() );
</literallayout>
        <para>
          A harmadik módosítás a bintree leftshiftet érinti. Root ptr-es esetben vizsgálni kell, hogy root létezik-e, viszont ezen esetben ha tree létezik akkor root-is (Java-ban swing-ben van erre sok példa, hogy van egy default úgymond implicit root mindig.).
        </para>
        <para>
          A negyedik módosítás hasonlóan a bintree leftshiftet érinti. Treep-nek magát root-ot nem assignolhatjuk, hanem root címe fog kelleni.
        </para>
<literallayout>
treep = &amp;root;
</literallayout>
        <para>
          Az ötödik módosítás <literal>ZLWTree</literal> template mentesítése. Enélkül az eredeti kód implicit konverziókat fog végezni és a leftshift is rosszul fog működni char-tól eltérő datatype esetén.
        </para>
        <para>
          A hatodik módosítás valójában csak annyi, hogy delegáltuk a node példányosítást BinTree ctor-nak.
        </para>
<literallayout>
ZLWTree() : BinTree&lt;char&gt;('/')
</literallayout>
        <para>
          A hetedik, nyolcadik és kilencedik módosítás valójában csak annyi, hogy root címe kell treep-nek hisz az pointer.
        </para>
        <programlisting language="c++" linenumbering="numbered">
          <textobject><textdata fileref="Welch/zlwtreerootcomp.cpp"/></textobject>
        </programlisting>
        <para>Persze hogy ne legyen baj, akár a ctorba is bepasszolhatjuk argként root és leftshift comparatorban használt value-t</para>
        <programlisting language="c++" linenumbering="numbered">
          <textobject><textdata fileref="Welch/zlwtreerootcomp2.cpp"/></textobject>
        </programlisting>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
          A kísérleti nbatfai twitch adásban látható megoldás lehet egy példa erre.
        </para>
        <para>
          Áttekintve annyiról van szó, hogy a egyszerre egy bináris fát és egy lzw fát fogunk csinálni.
          Kód duplikáció elkerülése végett pedig inheritance-t használunk.
          Apró kellemetlenség hogy egyenesen cpp-be megy, de mozgató szemantikás feladatban a saját megoldásomban úgyis nulláról újraírom az egészet, és ott már header is lesz.
        </para>
        <para>
          Úgy döntöttem <literal>ZLWTree</literal>-t template mentesítem és explicit <literal>BinTree&lt;char&gt;</literal>-ról származtatom, mert ctor és left shift esetében alul definiált lenne.
        </para>
        <para>
          Úgy döntöttünk hogy nesteljük bele a node osztályt.
          Talán ennek a bemutatásával érdemes kezdeni a dolgot:
        </para>
<literallayout>
class Node
  {
    ...
    ValueType value;
    Node* left;
    Node* right;
    int count;
  };
</literallayout>
      <para>ValueType BinTree template paramétere, ezt (mivel inner class), használhatjuk Node esetén is.</para>
      <para>Left right a gyermekekre mutató, ctor-ban nullptr-re initelt pointerek.</para>
      <para>Count a bináris kereső fa miatt fontos állapotváltozó. Egyszerűen annyiról van szó, hogyha például egy Bintree&lt;int&gt; be kétszer left shiftelek mondjuk 9-et, akkor ne két külön node jöjjön létre 9-es value-val. Ehelyett ilyen esetben a már létező 9-es értékű node count állapotváltozóját fogjuk a második 9-es miatt inkrementálni.</para>
      <para>A funkciók csak egyszerű setter-ek getter-ek. Incr count pedig csak egy shortcut, mert a count setter-t get_count()+1 kéne hívni.</para>
      <para>Most nézzük tree állapotváltozóit!</para>
      <para>Root a gyökérre mutató ptr. Treep a fenti manuális példákban a segéd ptr, míg depth egy internal változó, amit a traversalnál fogunk használni annak adminisztrálására, hogy milyen mélyen vagyunk.</para>
      <para>Persze, treep és depth nem kell törvényserűleg BinTree-be rakni. A mozgató szemantikás delegáljuk is majd ezt a felelősséget egy iterátornak ami csak és kizárólag a faépítéséért felelős.</para>
      <literallayout>
template&lt;typename ValueType&gt;
class BinTree
  {
    ...
    Node* root;
    Node* treep;
    int depth;
  };
</literallayout>
    <para>Viselkedések közül a left shift a legfontosabb, hiszen ez a node példányosítást végzi.</para>
<literallayout>
template&lt;typename ValueType&gt;
BinTree&lt;ValueType&gt;&amp; BinTree&lt;ValueType&gt;::operator&lt;&lt;(ValueType value)
{
  if(!treep){
    root = treep = new Node(value);
  }else if(treep-&gt;get_value() == value){
    treep-&gt;incr_count();
  }else if(treep-&gt;get_value() &gt; value){
    if(!treep-&gt;left_child()){
      treep-&gt;left_child(new Node(value));
    }else{
      treep = treep-&gt;left_child();
      *this&lt;&lt;value;
    }
  }else{
    if(!treep-&gt;right_child()){
      treep-&gt;right_child(new Node(value));
    }else{
      treep = treep-&gt;right_child();
      *this&lt;&lt;value;
    }
  }
  treep = root;
  return *this;
}
</literallayout>
    <para>Class-on kívül definiáltuk, de természetesen továbbra is template-es.</para>
    <para>A funkció minden esetben azzal zár hogy visszaugrunk root-ra.</para>
    <para>Ha a value egyenlő azzal a value-va amit a jelenlegi segéd ptr mutat, akkor csak inkrementálni fogjuk.</para>
    <para>Ha a value kisebb akkor bal irányba fogunk "mozdulni".</para>
    <para>Ha balra nincs még node, akkor létrehozunk egy bal gyermek node-ot a jelenleg treep által mutatott node-on.</para>
    <para>Ha balra van már node, akkor treep-t áthelyezzük és rekurzívan újra meghívjuk a funkciót (de ugye nem ugyanaz fog történni, hisz treep már máshol áll!).</para>
    <para>Ha az érték nagyobb akkor teljesen szimmetrikusan jobb irányba végezzük el ugyanezt</para>
    <para>print egy egyszerű inorder bejárást végez. Ezt a C-s példában fn ptr-el, a mozgatósban később pedig functorral fogjuk kiváltani.</para>
    <para>Itt annyit érdemes megjegyezni, hogy depth az <literal>BinTree</literal>osztály tulajdonsága.</para>
<literallayout> 
template&lt;typename ValueType&gt;
void BinTree&lt;ValueType&gt;::print(Node* node, std::ostream&amp; os)
{
  if(node){
    ++depth;
    print(node-&gt;right_child(),os );
    for(int i = 1; i &lt; depth; ++i){os &lt;&lt; "---";}
    os &lt;&lt; node-&gt;get_value() &lt;&lt; " " &lt;&lt; depth &lt;&lt; " " &lt;&lt; node-&gt;get_count() &lt;&lt; std::endl;
    print(node-&gt;left_child(),os );
    --depth;
  }
}
</literallayout>
  <para>deltree csak postorder-ben végig járja a node gyökerű subtree-t és felszabadítja a foglalt memóriát. A C-s kódban ez az a rész amit direkt címre pontosan ki is irattam.</para>
<literallayout>
template&lt;typename ValueType&gt;
void BinTree&lt;ValueType&gt;::deltree(typename BinTree&lt;ValueType&gt;::Node* node)
{
  if(node){
    deltree(node-&gt;left_child() );
    deltree(node-&gt;right_child() );
    delete node;
  }
}
</literallayout>
<para>ZLWTree esetén kicsit más a left shift. Ezt manuálisan levezettük feljebb. Az egyetlen külön említést érdemlő dolog az az hogy, 
  mivel class-on kívül írjuk a definíciót ezért globál namespace-ben nincs csak úgy benne Node varázsütésre.
  Ez látható a node példányosításos sorokban.</para>
<literallayout>
ZLWTree&amp; ZLWTree::operator&lt;&lt;(char value)
{
  if(value=='0'){
    if(!this-&gt;treep-&gt;left_child()){
      typename BinTree&lt;char&gt;::Node* node = new typename BinTree&lt;char&gt;::Node(value);
      this-&gt;treep-&gt;left_child(node);
      this-&gt;treep = this-&gt;root;
    }else{
      this-&gt;treep = this-&gt;treep-&gt;left_child();
    }
  }else{
    if(!this-&gt;treep-&gt;right_child()){
      typename BinTree&lt;char&gt;::Node* node = new typename BinTree&lt;char&gt;::Node(value);
      this-&gt;treep-&gt;right_child(node);
      this-&gt;treep = this-&gt;root;
    }else{
      this-&gt;treep = this-&gt;treep-&gt;right_child();
    }
  }
  return *this;
}
</literallayout>
  <para>Alább látható a zlw progi kimenete</para>
    <figure>
        <title>ZLW out</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/zlwout.png" scale="100" />
            </imageobject>
            <textobject>
                <phrase>ZLW out</phrase>
            </textobject>
        </mediaobject>
    </figure>
      <programlisting language="c++" linenumbering="numbered">
        <textobject><textdata fileref="Welch/zlwtreerootptr.cpp"/></textobject>
      </programlisting>
    </section>                     

    <section>
        <title>Mozgató és másoló szemantika</title>
        <para>
          Az előbbiekben megírt osztáy(oka)t fogjuk felkészíteni mozgatásra és másolásra.
          Ez a következő viselkedések implementációját vonja maga után:
        </para>
        <itemizedlist mark='bullet'>
          <listitem>
            <para>Copy ctor</para>
          </listitem>
          <listitem>
            <para>Copy assigment</para>
          </listitem>
          <listitem>
            <para>Move ctor</para>
          </listitem>
          <listitem>
            <para>Move assigment</para>
          </listitem>
        </itemizedlist>
        <para>
          Először a copy-val és utána  a move-al fogunk foglalkozni.
        </para>
        <para>
          Nézzük a copy ctor-t! Sajnos nem egyszerű a dolgunk. Gondoljunk bele, hogyha másolni akarjuk a fát, 
          akkor a root node-ot át kell másolnunk az újba. Viszont ha itt megállunk, akkor az új root node-unk a régi root node gyerekeire fog muattni,
          és amikor az egyik fa törlődik, akkor szépen ki fogja törölni a másik fa alól is a gyerekeket.
          Emiatt nem elég root-ot másolni, hanem deltree-hez hasonlóan rekurzívan másolni kell minden node-ot, effektíve klónozva a fát.
          Ezt nevezzük deep copy-nak (shallow copy lenne, ha csak pl. root-ot másolnánk.)
          Ilyet automata módon a compiler nem csinál, ezért nekünk kell megírni.
        </para>
        <para>
          Sajnos még mindig van egy baj. Ha a fentiek alapján megírnánk a kódot, akkor lenne két tökéletesen jó fánk A és B.
          Ahogy A-ba shifteljük az értékeket, azok szépen jelennének meg A-ban. Mi lenne B esetben?
        </para>
        <para>
          Nos, azzal a buggal szembesülnénk, hogy ahogy shifteljük B-be az értékeket, azok A-n jelennek meg egy darabig olykor, hiszen B treep-je a régi A egy node-jára mutatna, amíg treep vissza nem ugrana root-ra.
          Hogy ezt elkerüljük a deep copy során treep-t is menedzselni kell, azaz amikor épp azon node-ot másoljuk amin a régi treep van,
          akkor a másik B fa treep-jét az új node-ra állítjuk.
        </para>
<literallayout>
BinTree(const BinTree&amp; old)
{
  #ifdef LOG_TREE_LIFECYCLE
    std::cout&lt;&lt;"btree copy ctor "&lt;&lt; static_cast&lt;void*&gt;(this) &lt;&lt; std::endl;
  #endif
  root = deep_copy(old.root,old.treep);
}
</literallayout>
        <para>
          Deep copy esetén első arg-ként a régi A tree egy node-ját, másodikként a régi treep-t kapjuk.
          Ha a régi node nullptr akkor csak visszaadunk egy nullptr-t.
          Ha azonban létezik, akkor csinálunk egy újat átmásoljuk az értéket (pontosabban a ctor-ba arg-ként küldjük), és átmásoljuk a count int típusú data membert.
          A rekurzív rész most jön, ugyanis a gyerek node-okat nem a régi fa nodejaira akarjuk állítani, hanem újonnan készített node-okra.
          Azaz ezekre újból rekurzívan hívjuk deep_copy-t.
          Ezt persze mind bal mind jobb gyereknél meg kell csinálni.
          A végén ellenőriznünk kell, hogy az a régi node amit jelenleg dolgoztunk fel éppen véletlenül az-e amire a régi treep mutatott.
          Ha ez így van akkor az új fa treep-jét átállítjuk az új node-ra.
        </para>
<literallayout>
Node* deep_copy(Node* old_n, Node* old_treep)
{
  Node* newn = nullptr; 
  if(old_n){
    newn = new Node(old_n-&gt;get_value());
    newn-&gt;left_child(deep_copy(old_n-&gt;left_child(),old_treep));
    newn-&gt;right_child( deep_copy(old_n-&gt;right_child(),old_treep));
    if(old_n==old_treep){this-&gt;treep=newn;}
  }
  return newn;
}
</literallayout>
    <para>
      A következő a move assignment. Itt annyi történik, hogy a régi BinTree instance és az új BinTree instance root illetve treep pointereit megcseréljük.
      Nem kell ki nullptr-ezni a saját root és treep-nket swap előtt, hiszen ha már move assignment hívódik, akkor ezek vagy eleve nullptr-ek, vagy valid ptr-ek.
    </para>
<literallayout>
BinTree&amp; operator=(BinTree&amp;&amp; old)
{
  #ifdef LOG_TREE_LIFECYCLE
    std::cout&lt;&lt;"btree move assign "&lt;&lt; static_cast&lt;void*&gt;(this) &lt;&lt; std::endl;
  #endif
  std::swap(old.root,root);
  std::swap(old.treep,treep);
  return *this;
}
</literallayout>
    <para>
      A következő a move ctor. Itt kihasználjuk move assignmentet.
      Vegyük észre, hogy előtte a saját root és treep-t nullptr-e vesszük fel.
       Ha nem így tennénk akkor ezek uninitialized-ok lennének, magyarul memória szemét lenne rajtuk, és invalid helyekre mutatnának.
    </para>
<literallayout>
BinTree(BinTree&amp;&amp; old)
{
  #ifdef LOG_TREE_LIFECYCLE
    std::cout&lt;&lt;"btree move ctor "&lt;&lt; static_cast&lt;void*&gt;(this) &lt;&lt; std::endl;
  #endif
  root = nullptr;
  treep = nullptr;
  *this=std::move(old);
}
</literallayout>
  <para>
    Copy assignment a copy ctor, move ctor és move assignment ismeretében egy trükkel könnyen megvalósítható.
    Egyszerűen létrehozunk egy temp nevű ctor body scope-an létező lokális BinTree instance-t.
    Ezen BinTree instance copy ctor-ral lemásolja a régit.
    Ezután std::swap-el tmp és a jelenleg this által mutatott BinTree példányok közt cserét hajt végre.
    Mikor elhagyjuk a ctor scope-ot a this által mutatott instance életben marad (ő az old másolat),
    a régi pedig "elpusztul", azaz dtor hívódik az általta mutatott címre majd fel lesz szabadítva az általa foglalt memória terület.
  </para>
<literallayout>
 BinTree&amp; operator=(const BinTree&amp; old)
  {
    #ifdef LOG_TREE_LIFECYCLE
      std::cout&lt;&lt;"btree copy assign "&lt;&lt; static_cast&lt;void*&gt;(this) &lt;&lt; std::endl;
    #endif
    BinTree tmp(old);
    std::swap(*this,tmp);
    return *this;
  }
</literallayout>
        <para>
          Alább a teljes kód.
        </para>
      <programlisting language="c++" linenumbering="numbered">
        <textobject><textdata fileref="Welch/zlwtreerootptr_mv_cp.cpp"/></textobject>
      </programlisting>
        <para>
          Ha a traversalt esetleg egy user supplied lambdára akarjuk cserélni akkor alábbi kódban találhatunk rá megoldást:
          Az előző kódhoz képest itt a számítást is megcsináltuk. Mármint node depth max, átlag, szórás.
        </para>
        <programlisting language="c++" linenumbering="numbered">
        <textobject><textdata fileref="Welch/lzw.cpp"/></textobject>
      </programlisting>
    </section>                     

</chapter>                
